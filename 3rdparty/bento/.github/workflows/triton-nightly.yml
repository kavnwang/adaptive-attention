name: Triton Nightly Build

on:
  schedule:
    - cron: "0 8 * * *"

  workflow_dispatch:
    inputs:
      run_single_version_test:
        description: '▶️ Run a test build for a single Python version?'
        type: boolean
        default: false
      python_test_version:
        description: '🐍 Python version for the test build (e.g., 3.12)'
        type: string
        default: '3.12'
      build_architecture:
        description: '🏗️ Architecture for the test build'
        type: choice
        options:
        - x86_64
        - aarch64
        - all
        default: 'x86_64'

jobs:
  # ===================================================================
  # JOB 1: Regular Nightly Build (from main branch)
  # ===================================================================
  nightly-build:
    if: >
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' &&
       !github.event.inputs.run_single_version_test)
    strategy:
      fail-fast: false
      matrix:
        config:
        - {runs_on: "['self-hosted', 'x64-docker']", arch: 'x86_64', timeout: 360}
        - {runs_on: "['self-hosted', 'aarch64-docker']", arch: 'aarch64', timeout: 1200}
    uses: ./.github/workflows/reusable-build-triton.yml
    with:
      runner: ${{ matrix.config.runs_on }}
      arch: ${{ matrix.config.arch }}
      timeout: ${{ matrix.config.timeout }}
      checkout-ref: 'main'
      package-name: 'triton-nightly'
      cibw-build: 'cp3{10,11,12,13}-manylinux_${{ matrix.config.arch }}'
      cibw-skip: 'cp{35,36,37,38,39,13t}-*'
    secrets: inherit

  # ===================================================================
  # JOB 2: Single Python Version Test Build (Manually Triggered)
  # ===================================================================
  prepare-test-matrix:
    runs-on: ['self-hosted']
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Generate execution matrix
        id: generate-matrix
        run: |
          py_ver_nodot=$(echo "${{ github.event.inputs.python_test_version }}" | tr -d '.')
          arch_choice="${{ github.event.inputs.build_architecture }}"

          # Define the configurations for each architecture
          x64_config="{\"config\": {\"runs_on\": \"['self-hosted', 'x64-docker']\", \"arch\": \"x86_64\", \"timeout\": 120}, \"cibw_build_spec\": \"cp${py_ver_nodot}-manylinux_x86_64\"}"
          aarch64_config="{\"config\": {\"runs_on\": \"['self-hosted', 'aarch64-docker']\", \"arch\": \"aarch64\", \"timeout\": 720}, \"cibw_build_spec\": \"cp${py_ver_nodot}-manylinux_aarch64\"}"

          # Build the final JSON matrix string based on the user's choice
          matrix_content=""
          if [[ "$arch_choice" == "x86_64" || "$arch_choice" == "all" ]]; then
            matrix_content="$x64_config"
          fi
          if [[ "$arch_choice" == "aarch64" || "$arch_choice" == "all" ]]; then
            if [ -n "$matrix_content" ]; then
              matrix_content="$matrix_content,$aarch64_config"
            else
              matrix_content="$aarch64_config"
            fi
          fi

          # Wrap the content in the final JSON structure for the matrix
          final_matrix="{\"include\":[$matrix_content]}"
          echo "Generated Matrix: $final_matrix"
          echo "matrix=$final_matrix" >> $GITHUB_OUTPUT

  execute-test-build:
    needs: prepare-test-matrix
    if: needs.prepare-test-matrix.outputs.matrix != ''
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-test-matrix.outputs.matrix) }}
    uses: ./.github/workflows/reusable-build-triton.yml
    with:
      runner: ${{ matrix.config.runs_on }}
      arch: ${{ matrix.config.arch }}
      timeout: ${{ matrix.config.timeout }}
      checkout-ref: 'main'
      package-name: 'triton-nightly'
      cibw-build: ${{ matrix.cibw_build_spec }}
      cibw-skip: 'cp{35,36,37,38,39}-*'
    secrets: inherit
